#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/stat.h>
//#include <unistd.h>

#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2
#define MY_SC_OPEN_MAX 1024

void my_close_fd()
{
 int i;
 for (i = 3; i < MY_SC_OPEN_MAX; ++i)
  close(i);
}

int main()
{
 int pid;
 int pid2;
 int status;

 my_close_fd();

 //signal(...);
 //sigaction(...);   //In this program i havn't change sygnal's handler. Thus this command is not neccesary/               

 pid = fork();                      //fork -> child_1

 if (pid == -1)              
 {
  printf("Errore! Can't fork! (1)\n");
  exit(1); 
 }
 if (pid != 0) 
 exit(0);


 if (pid == 0)
 {
   setsid();            //delete zombie + child1 -> new session!
 
   pid2 = fork();                 //child_1 -> child_2
   if (pid2 == -1)
   {
    printf("ERRORE! Can't fork (2)\n");
    exit(2);
   }
   if (pid2 != 0)
   exit(0);   
   //else 
   if ( pid == 0)
   {
     umask(0);               //default settings 
 
     close (STDIN_FILENO);
     close (STDOUT_FILENO);
     close (STDERR_FILENO);


     chdir('/');
  
     printf("Test_print\n");
     sleep(20);
   }
 }
 
return 0;
}
