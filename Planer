#include <iostream>
#include <string>
#include <queue>
#include <unordered_map>
#include <list>
#include <utility>
#include <fstream>
#include <algorithm>   
#include <ctime>

using std::string;

class unexisted_note_error : public std::exception
{
public:
	explicit unexisted_note_error()
	{ }

	virtual const char* what() const throw() {
		return "Callable note doesn't exist!";
	}
};

class Note {
public:
	Note(string date, string title) :
		_date(date),
		_title(title) {}
	string get_date() { return _date; }
	string get_title() { return _title; }
	void set_date(string date) { _date = date; }
	void set_title(string title) { _title = title; }
	bool operator==(Note other) {	
		return (this->_date == other.get_date() && this->_title == other.get_title());
	}
	bool operator<(Note other) {
		return this->_date < other.get_date();
	}
private:
	string _date;
	string _title;
};


class Person {
public:
	Person() : _name("__NoName__") {}

	Person(string name) : _name(name) {}

	string get_name() { return _name; }

	void set_name(const char* name) { _name = name; }

	virtual ~Person() {}
private:
	string _name;
};


class Person_Planer : public Person {	
public:
	Person_Planer() { 
		if (!_events.empty()) {
			std::cout << "smth wrong, repeat!\n";
			throw _SYSTEM_ERROR_;
		}
	};

	Person_Planer(string name_to_file) {
		std::ifstream input_file(name_to_file + "_Planner.txt");
		string str_note;
		while (getline(input_file, str_note)) {                        
			_events.push_back(_split_to_note(str_note)); 
		}
		input_file.close();
	}

	void insert(string &date, string &title) {
		_events.push_back(Note(date, title));
	}

	void insert(const char* date, const char* title) { insert(string(date), string(title)); }

	bool edit(string &old_title, string new_date = "$", string new_title = "$") {
		std::list<Note>::iterator it;
		for (std::list<Note>::iterator note = _events.begin(); note != _events.end(); ++note)
			if (note->get_title() == old_title) {
				it = note;
				break;
			}
		if (new_date != "$")
			it->set_date(new_date);
		if (new_title != "$") {
			it->set_title(new_title);
		}
		return true;
	}

	bool edit(const char* old_title, const char* new_date = "$", const char* new_title = "$") {
		return edit(string(old_title), string(new_date), string(new_title));
	}

	bool remove(string &title) {
		std::list<Note>::iterator note;
		for (note = _events.begin(); note != _events.end(); ++note)
			if (note->get_title() == title) {
				_events.erase(note);
				return true;
			}
		if (note == _events.end())
			return false;
	}

	bool remove(const char* title) { return remove(string(title)); }

	void show_all() {
		std::cout  << this->get_name() << ", you have those deals and events:" << std::endl;
		for (auto note : _events) 
			std::cout << note.get_date() << "  " << note.get_title() << std::endl;
	}

	void show_nearest(int require_amount = 5) {
		_events.sort();
		string cur_date = _get_current_date();
		int printed = 0;
		std::cout << get_name() << ", nearest " << require_amount << " events are: "<< std::endl;
		for (auto note : _events) {
			if (cur_date < note.get_date())
				if (printed > require_amount)
					break;
				std::cout << note.get_date() << "  " << note.get_title() << std::endl;
				++printed;
		}
	}

	void exit() {
		std::ofstream fout;
		fout.open(this->get_name() + "_Planner.txt");
		for (auto note : _events) {
			fout << note.get_date() << " " << note.get_title() << "\n";
		}
		fout.close();
	}
private:
	string _get_current_date() {
		time_t t = time(0);   // get time now
		struct tm * now = localtime(&t);
		return std::to_string(now->tm_year + 1900) + '-'
			+ std::to_string(now->tm_mon + 1) + '-'
			+ std::to_string(now->tm_mday);
	}

	Note _split_to_note(string note_str) {
		size_t space = note_str.find(" ");
		return Note(note_str.substr(0, space), note_str.substr(space + 1, note_str.length() - space - 1));
	}

	std::list<Note> _events;
};

int main() {
	setlocale(LC_ALL, "rus");
	Person_Planer pl;

	pl.insert("2017-04-23", "make project");
	pl.insert("2017-05-01", "selebrete 1 may");
	pl.insert("2017-05-31", "prepare");
	pl.insert("2017-01-23", "qwe");
	pl.insert("2017-04-24", "sleep");
	pl.insert("2017-02-23", "selebrate");
	pl.show_all();
	pl.edit("selebrate", "$", "selebratedddd");
	pl.remove("qwe");
	//pl.show_all();
	pl.show_nearest(2);

	pl.set_name("OOP");
	pl.show_all();
	pl.exit();

	string name = "OOP";
	Person_Planer pl2(name);
	pl2.insert("2015-01-01", "gotcha!");
	pl2.show_all();

	return 0;
}



